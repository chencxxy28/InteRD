devtools::load_all(".")
devtools::load_all(".")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all(".")
devtools::document()
library(roxygen2) # In-Line Documentation for R
library(devtools) # Tools to Make Developing R Packages Easier
library(testthat) # Unit Testing for R
library(usethis)  # Automate Package and Project Setup
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::test()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
usethis::use_vignette
usethis::use_vignette("NAME-OF-VIGNETTE")
knitr::opts_chunk$set(echo = TRUE)
#load
library(MultiRD)
#load
library(InteRD)
readRDSFromWeb <- function(ref) {
readRDS(gzcon(url(ref)))
}
seger <- readRDSFromWeb("https://github.com/chencxxy28/MultiRD/raw/master/vignettes/data/segerstolpe.rds")
set.seed(1234567)
pseudo.seger<-generateBulk(seger[["sc.eset.qc"]], ct.varname = "cluster", sample = "sample", ct.sub = c("alpha","beta","delta","gamma"), nbulk = 40, low_s = 0.3, upp_s = 0.7)
#ensemble of multiple reference sets
pancreas.sc <- list(baron = qc.baron$sc.eset.qc,
xin   = xin
)
#ensemble of multiple reference sets
pancreas.sc <- list(baron = baron$sc.eset.qc,
xin   = xin
)
baron <- readRDSFromWeb("https://github.com/chencxxy28/MultiRD/raw/master/vignettes/data/baron.rds")
xin<-readRDSFromWeb("https://github.com/chencxxy28/MultiRD/raw/master/vignettes/data/Xin_nonD.rds")
set.seed(1234567)
#ensemble of multiple reference sets
pancreas.sc <- list(baron = baron$sc.eset.qc,
xin   = xin
)
fit_music_semi<-SCDC_ENSEMBLE(bulk.eset = pseudo.seger$pseudo_eset, sc.eset.list = pancreas.sc, ct.varname = "cluster",
sample = "sample", weight.basis = T,truep = truep, ct.sub =  c("alpha","beta","delta","gamma"), search.length = 0.02,grid.search=T)
truep<-pseudo.seger$truep[complete.cases(pseudo.seger$truep),]
pseudo.seger$truep
pseudo.seger
#load
library(InteRD)
seger <- readRDSFromWeb("https://github.com/chencxxy28/MultiRD/raw/master/vignettes/data/segerstolpe.rds")
baron <- readRDSFromWeb("https://github.com/chencxxy28/MultiRD/raw/master/vignettes/data/baron.rds")
xin<-readRDSFromWeb("https://github.com/chencxxy28/MultiRD/raw/master/vignettes/data/Xin_nonD.rds")
set.seed(1234567)
pseudo.seger<-generateBulk(seger[["sc.eset.qc"]], ct.varname = "cluster", sample = "sample", ct.sub = c("alpha","beta","delta","gamma"), nbulk = 40, low_s = 0.3, upp_s = 0.7)
truep<-pseudo.seger$truep[complete.cases(pseudo.seger$truep),]
pseudo.seger$truep
truep<-pseudo.seger$true_p[complete.cases(pseudo.seger$true_p),]
set.seed(1234567)
##ensemble of multiple reference sets
#resuts based on SCDC
pancreas.sc <- list(baron = baron$sc.eset.qc,
xin   = xin
)
SCDC_results<-SCDC_ENSEMBLE(bulk.eset = pseudo.seger$pseudo_eset, sc.eset.list = pancreas.sc, ct.varname = "cluster",
sample = "sample", weight.basis = T,truep = truep, ct.sub =  c("alpha","beta","delta","gamma"), search.length = 0.02,grid.search=T)
comb<-fit_music_semi$prop.only
comb<-SCDC_results$prop.only
weight_matrix<-SCDC_results$w_table["mAD_Y",1:2]
SCDC_ENSEMBLE_MAD<-SCDC:::wt_prop(weight_matrix,comb)
#results based on InteRD1
list_marker<-readRDS("/Users/chixiang.chen/OneDrive - University of Maryland School of Medicine/postdoc/postdoc/deconvolution/ref_based_rd/simulations/simulation_08252021/interb1/list_markerbaron20.rds")
lambda_option<-c(0,0.01,0.05,0.1,1,5,100)
cell_type_unique<-c("alpha","beta","delta","gamma")
comb
lambda_option<-c(0,0.01,0.05,0.1,1,5,100)
cell_type_unique<-c("alpha","beta","delta","gamma")
results_ref_based_ensemble<-InteRD1(bulk.data =pseudo.seger$pseudo_eset,list_marker,cell_type_unique,comb_used=comb,lambda_option)
InteRD1.outputã€Š-results_ref_based_ensemble
InteRD1.output<-results_ref_based_ensemble
InteRD1<-InteRD.predict.prop(InteRD.output=InteRD.output)
InteRD1<-InteRD.predict.prop(InteRD.output=InteRD1.output)
apply(abs(InteRD1-truep),2,mean)
apply(abs(SCDC_ENSEMBLE_MAD-truep),2,mean)
devtools::document()
#load
library(InteRD)
pseudo.seger$true_p
evaluate(SCDC_ENSEMBLE_MAD,pseudo.seger$true_p)$all.eva
evaluate(InteRD1,pseudo.seger$true_p)$all.eva
evaluate(SCDC_ENSEMBLE_MAD,pseudo.seger$true_p)$all.eva
evaluate(InteRD1,pseudo.seger$true_p)$all.eva
evaluate(SCDC_ENSEMBLE_MAD,pseudo.seger$true_p)$all.eva
evaluate(InteRD1,pseudo.seger$true_p)$all.eva
evaluate(SCDC_ENSEMBLE_MAD,pseudo.seger$true_p)$all.eva
evaluate(InteRD1,pseudo.seger$true_p)$all.eva
devtools::document()
cell_type_unique
#load
library(InteRD)
ave_est = pop.ct.prop.scRNA(scRNA=seger[["sc.eset.qc"]],cell_type_unique=cell_type_unique)$pop.ct.prop
scRNA=seger[["sc.eset.qc"]]
cluster="cluster"
sample="sample"
sampleid<-scRNA@phenoData@data[[sample]]
clusterid<-scRNA@phenoData@data[[cluster]]
sc_proportions<-sapply(1:length(unique(scRNA@phenoData@data[[sample]])),function (x)
{
ct_x<-scRNA@phenoData@data[[cluster]][sampleid %in% unique(sampleid)[x] & (clusterid %in% cell_type_unique)]
table(ct_x)/sum(table(ct_x))
}
)
sc_proportions<-t(sc_proportions[cell_type_unique,])
rownames(sc_proportions)<-sampleid
sampleid
output.mean<-apply(sc_proportions,2,mean)
output.sd<-apply(sc_proportions,2,sd)
devtools::document()
#load
library(InteRD)
ave_est = pop.ct.prop.scRNA(scRNA=seger[["sc.eset.qc"]],cell_type_unique=cell_type_unique)$pop.ct.prop
ave_est
ave_sd = pop.ct.prop.scRNA(scRNA=seger[["sc.eset.qc"]],cell_type_unique=cell_type_unique)$pop.ct.sd
ave_sd
comb_sampled
lambda_option<-c(0,seq(from=1,to=20,length=4),seq(from=30,to=100,length=4),200,500,1000000^2)
InteRD2.output<-InteRD2(bulk.data=pseudo.seger$pseudo_eset,list_marker,cell_type_unique,comb_sampled=InteRD1,ave_est,ave_sd,lambda_option1=lambda_option)
InteRD2.output<-InteRD2(bulk.data=pseudo.seger$pseudo_eset,list_marker,cell_type_unique,comb_sampled=InteRD1,ave_est,ave_sd,lambda_option=lambda_option)
InteRD2<-InteRD.predict.prop(InteRD.output=InteRD2.output)
evaluate(SCDC_ENSEMBLE_MAD,pseudo.seger$true_p)$all.eva
evaluate(InteRD1,pseudo.seger$true_p)$all.eva
evaluate(InteRD2,pseudo.seger$true_p)$all.eva
pkgdown::build_site()
install.packages("pkgdown")
pkgdown::build_site()
devtools::install_github('r-lib/ragg')
install.packages("ragg")
devtools::install_github('r-lib/systemfonts')
devtools::document()
knitr::opts_chunk$set(echo = TRUE)
#load
library(InteRD)
library(InteRD)
knitr::opts_chunk$set(echo = TRUE)
devtools::install_github("chencxxy28/InteRD")
devtools::install_github("hadley/devtools")
install.packages("devtools.zip", repos = NULL)
install.packages("remotes")
install.packages("remotes")
devtools::install_github("chencxxy28/MultiRD")
devtools::install_github("chencxxy28/MultiRD")
devtools::install_github("chencxxy28/MultiRD")
install_github("Displayr/flipPlots")
devtools::install_github("Displayr/flipPlots")
devtools::install_github("Displayr/flipPlots",auth_token = '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')
Sys.setenv(GITHUB_PAT = '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')
devtools::install_github("Displayr/flipPlots",auth_token = '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')
devtools::install_github('evwalz/uroc',auth_token = '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')
GITHUB_PAT='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'
usethis::edit_r_environ(GITHUB_PAT='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')
usethis::edit_r_environ()
usethis::browse_github_pat()
usethis::reate_github_token()
usethis::create_github_token()
devtools::install_github("chencxxy28/InteRD")
devtools::install_github("chencxxy28/InteRD")
pkgdown::build_site()
devtools::install_github('r-lib/ragg')
devtools::install_github('r-lib/ragg')
devtools::install_github('r-lib/ragg')
devtools::install_github('r-lib/ragg')
usethis::edit_r_environ()
pkgdown::build_site()
devtools::install_github('r-lib/ragg')
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE)
readRDSFromWeb <- function(ref) {
readRDS(gzcon(url(ref)))
}
seger <- readRDSFromWeb("https://github.com/chencxxy28/InteRD/tree/main/vignettes/data/segerstolpe.rds")
seger <- readRDSFromWeb("https://github.com/chencxxy28/InteRD/tree/main/vignettes/data/segerstolpe.rds")
baron <- readRDSFromWeb("https://github.com/chencxxy28/InteRD/tree/main/vignettes/data/baron.rds")
xin<-readRDSFromWeb("https://github.com/chencxxy28/InteRD/tree/main/vignettes/data/Xin_nonD.rds")
seger <- readRDSFromWeb("https://github.com/chencxxy28/MultiRD/raw/master/vignettes/data/segerstolpe.rds")
readRDS("https://github.com/chencxxy28/InteRD/tree/main/vignettes/data/baron.rds")
seger <- readRDSFromWeb("https://github.com/chencxxy28/InteRD/tree/main/vignettes/data/segerstolpe.rds")
seger <- readRDSFromWeb("https://github.com/chencxxy28/InteRD/tree/main/vignettes/data/segerstolpe.rds")
baron <- readRDSFromWeb("https://github.com/chencxxy28/InteRD/tree/main/vignettes/data/baron.rds")
xin<-readRDSFromWeb("https://github.com/chencxxy28/InteRD/tree/main/vignettes/data/Xin_nonD.rds")
baron <- readRDSFromWeb("https://github.com/chencxxy28/InteRD/blob/main/vignettes/data/baron.rds")
baron <- readRDSFromWeb("https://github.com/chencxxy28/InteRD/raw/main/vignettes/data/baron.rds")
seger <- readRDSFromWeb("https://github.com/chencxxy28/InteRD/raw/main/vignettes/data/segerstolpe.rds")
baron <- readRDSFromWeb("https://github.com/chencxxy28/InteRD/raw/main/vignettes/data/baron.rds")
pkgdown::build_site()
set.seed(1234567)
pseudo.seger<-generateBulk(seger[["sc.eset.qc"]], ct.varname = "cluster", sample = "sample", ct.sub = c("alpha","beta","delta","gamma"), nbulk = 40, low_s = 0.3, upp_s = 0.7)
#load
library(InteRD)
install.packages(InteRD)
seger <- readRDSFromWeb("https://github.com/chencxxy28/InteRD/raw/main/vignettes/data/segerstolpe.rds")
View(seger)
seger <- readRDSFromWeb("https://github.com/chencxxy28/InteRD/raw/main/vignettes/data/segerstolpe.rds")
baron <- readRDSFromWeb("https://github.com/chencxxy28/InteRD/raw/main/vignettes/data/baron.rds")
View(baron)
seger <- readRDSFromWeb("https://github.com/chencxxy28/InteRD/raw/main/vignettes/data/segerstolpe.rds")
View(seger)
seger <- readRDSFromWeb("https://github.com/chencxxy28/InteRD/raw/main/vignettes/data/segerstolpe.rds")
View(seger)
pkgdown::build_site()
#results based on InteRD1
list_marker<-readRDS("https://github.com/chencxxy28/InteRD/raw/main/vignettes/data/list_markerbaron20.rds") #get markers selected from xin et al (2016)
#results based on InteRD1
list_marker<-readRDSFromWeb("https://github.com/chencxxy28/InteRD/raw/main/vignettes/data/list_markerbaron20.rds") #get markers selected from xin et al (2016)
pkgdown::build_site()
devtools::install_github("chencxxy28/InteRD")
knitr::opts_chunk$set(echo = TRUE)
#load
library(InteRD)
library(SCDC)
require("devtools")
devtools::install_github("chencxxy28/InteRD")
library(devtools)
devtools::install_github("chencxxy28/InteRD")
knitr::opts_chunk$set(echo = TRUE)
devtools::install_github("chencxxy28/InteRD")
github_get_token()
devtools::install_github("chencxxy28/InteRD")
usethis::browse_github_pat()
create_github_token()
usethis::create_github_token()
gitcreds::gitcreds_set()
devtools::install_github("chencxxy28/InteRD")
GITHUB_TOKEN
devtools::install_github("chencxxy28/InteRD")
> remotes::install_github('chencxxy28/InteRD', auth_token = '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')
remotes::install_github('chencxxy28/InteRD', auth_token = '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')
#document:
devtools::document()
#load
library(InteRD)
readRDSFromWeb <- function(ref) {
readRDS(gzcon(url(ref)))
}
seger <- readRDSFromWeb("https://github.com/chencxxy28/InteRD/raw/main/vignettes/data/segerstolpe.rds")
seger <- readRDSFromWeb("https://github.com/chencxxy28/InteRD/raw/main/vignettes/data/segerstolpe.rds")
baron <- readRDSFromWeb("https://github.com/chencxxy28/InteRD/raw/main/vignettes/data/baron.rds")
baron <- readRDSFromWeb("https://github.com/chencxxy28/InteRD/raw/main/vignettes/data/baron.rds")
xin<-readRDSFromWeb("https://github.com/chencxxy28/InteRD/raw/main/vignettes/data/Xin_nonD.rds")
set.seed(1234567)
pseudo.baron<-generateBulk(baron[["sc.eset.qc"]], ct.varname = "cluster", sample = "sample", ct.sub = c("alpha","beta","delta","gamma"), nbulk = 40, low_s = 0.3, upp_s = 0.7)
pseudo.baron<-generateBulk(baron[["sc.eset.qc"]], ct.varname = "cluster", sample = "sample", ct.sub = c("alpha","beta","delta","gamma"), nbulk = 40, low_s = 0.3, upp_s = 0.7)
truep<-pseudo.baron$true_p[complete.cases(pseudo.baron$true_p),]
set.seed(1234567)
##ensemble of multiple reference sets
#resuts based on SCDC
pancreas.sc <- list(seger = seger$sc.eset.qc,
xin   = xin
)
SCDC_results<-SCDC_ENSEMBLE(bulk.eset = pseudo.baron$pseudo_eset, sc.eset.list = pancreas.sc, ct.varname = "cluster",
sample = "sample", weight.basis = T,truep = truep, ct.sub =  c("alpha","beta","delta","gamma"), search.length = 0.02,grid.search=T)
comb<-SCDC_results$prop.only
weight_matrix<-SCDC_results$w_table["mAD_Y",1:2]
SCDC_ENSEMBLE_MAD<-SCDC:::wt_prop(weight_matrix,comb)
#results based on InteRD1
list_marker<-readRDSFromWeb("https://github.com/chencxxy28/InteRD/raw/main/vignettes/data/list_markerbaron20.rds") #get markers selected from xin et al (2016)
weight_matrix<-SCDC_results$w_table["mAD_Y",1:2]
SCDC_ENSEMBLE_MAD<-SCDC:::wt_prop(weight_matrix,comb)
#results based on InteRD1
list_marker<-readRDSFromWeb("https://github.com/chencxxy28/InteRD/raw/main/vignettes/data/list_markerbaron20.rds") #get markers selected from xin et al (2016)
lambda_option<-c(0,0.01,0.05,0.1,1,5,100)
cell_type_unique<-c("alpha","beta","delta","gamma")
InteRD1.output<-InteRD1(bulk.data =pseudo.baron$pseudo_eset,list_marker,cell_type_unique,comb_used=comb,lambda_option)
InteRD1<-InteRD.predict.prop(InteRD.output=InteRD1.output)
evaluate(SCDC_ENSEMBLE_MAD,pseudo.seger$true_p)$all.eva
evaluate(SCDC_ENSEMBLE_MAD,pseudo.baron$true_p)$all.eva
evaluate(InteRD1,pseudo.baron$true_p)$all.eva
evaluate(SCDC_ENSEMBLE_MAD,pseudo.baron$true_p)$all.eva
evaluate(InteRD1,pseudo.baron$true_p)$all.eva
ave_est = pop.ct.prop.scRNA(scRNA=baron[["sc.eset.qc"]],cell_type_unique=cell_type_unique)$pop.ct.prop
ave_sd = pop.ct.prop.scRNA(scRNA=baron[["sc.eset.qc"]],cell_type_unique=cell_type_unique)$pop.ct.sd
lambda_option<-c(0,seq(from=1,to=20,length=4),seq(from=30,to=100,length=4),200,500,1000000^2)
InteRD2.output<-InteRD2(bulk.data=pseudo.baron$pseudo_eset,list_marker,cell_type_unique,comb_sampled=InteRD1,ave_est,ave_sd,lambda_option=lambda_option)
InteRD2.output<-InteRD2(bulk.data=pseudo.baron$pseudo_eset,list_marker,cell_type_unique,comb_sampled=InteRD1,ave_est,ave_sd,lambda_option=lambda_option)
InteRD2<-InteRD.predict.prop(InteRD.output=InteRD2.output)
evaluate(InteRD2,pseudo.baron$true_p)$all.eva
pkgdown::build_site()
betaT<-c(-0.5,0.5,-0.5,0.5,-1,1)
c(betaT[1:4]+0.05,0,0)
c(betaT[1:4]+0.1,0,0)
usethis::use_pkgdown()
pkgdown::build_site()
library(InteRD)
install.packages(InteRD)
devtools::document()
devtools::document()
pkgdown::build_site()
c(betaT[1:4]+0.1,betaT[5:6])
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
usethis::use_github_action_check_standard()
library(scdc)
library(SCDC)
devtools::document()
devtools::check()
devtools::document()
usethis::use_github_action_check_standard()
devtools::document()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::document()
devtools::check()
devtools::check_win_devel()
results <- rhub::check_for_cran()
rhub::validate_email()
results <- rhub::check_for_cran()
rhub::platforms()
devtools::spell_check()
devtools::document()
devtools::spell_check()
# generate pdf manual
devtools::build_manual("/Users/chixiang.chen/Library/CloudStorage/OneDrive-UniversityofMarylandSchoolofMedicine/postdoc/postdoc/deconvolution/ref_based_rd")
# generate pdf manual
devtools::build_manual("/Users/chixiang.chen/Library/CloudStorage/OneDrive-UniversityofMarylandSchoolofMedicine/postdoc/postdoc/deconvolution/ref_based_rd/InteRD/")
usethis::use_github_actions()
results <- rhub::check_for_cran()
rhub::platforms()
?check_for_cran
results <- rhub::check_for_cran(platforms=macos-highsierra-release)
results <- rhub::check_for_cran(platforms="macos-highsierra-release")
# Get the summary of your results
results$cran_summary()
# Generate your cran-comments.md, then you copy-paste the output from the function above
usethis::use_cran_comments()
# generate pdf manual
devtools::build_manual("/Users/chixiang.chen/Library/CloudStorage/OneDrive-UniversityofMarylandSchoolofMedicine/postdoc/postdoc/deconvolution/ref_based_rd/InteRD/")
devtools::release()
devtools::release()
#write the news.md
usethis::use_news_md()
devtools::release()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
results <- rhub::check_for_cran(platforms="macos-highsierra-release")
# Get the summary of your results
results$cran_summary()
# Generate your cran-comments.md, then you copy-paste the output from the function above
usethis::use_cran_comments()
# Check for win-builder
devtools::check_win_devel()
devtools::release()
# Spell check
devtools::spell_check()
devtools::document()
BiocCheckGitClone()
?BiocCheckGitClone
??BiocCheckGitClone
install.packages("BiocManager")
install.packages("BiocManager")
BiocCheckGitClone()
library(BiocManager)
BiocCheckGitClone()
BiocManager::BiocCheckGitClone()
BiocManager:BiocCheckGitClone()
BiocCheck::BiocCheck('new-package'=TRUE)
BiocManager::install("BiocCheck")
BiocCheck::BiocCheck('new-package'=TRUE)
install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_0.4.10.tar.gz", repos = NULL, type="source")
BiocCheck::BiocCheck('new-package'=TRUE)
BiocCheck::BiocCheck('new-package'=TRUE)
devtools::check()
devtools::document()
devtools::document()
