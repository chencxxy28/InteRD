readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
pseudo.seger<-readRDSFromWeb("https://github.com/chencxxy28/Data/raw/main/data_InteRD/pseudo.seger.rds")
comb<-readRDSFromWeb("https://github.com/chencxxy28/Data/raw/main/data_InteRD/comb_seger.rds")
list_marker<-readRDSFromWeb("https://github.com/chencxxy28/Data/raw/main/data_InteRD/list_markerbaron20.rds") #get markers
lambda_option<-0
cell_type_unique<-c("alpha","beta","delta","gamma")
InteRD1.output<-InteRD1(bulk.data =pseudo.seger$pseudo_eset,list_marker,cell_type_unique,comb_used=comb,lambda_option)
InteRD1<-InteRD.predict.prop(InteRD.output=InteRD1.output)
ave_est = pop.ct.prop.scRNA(scRNA=seger[["sc.eset.qc"]],cell_type_unique=cell_type_unique)$pop.ct.prop
ave_sd = pop.ct.prop.scRNA(scRNA=seger[["sc.eset.qc"]],cell_type_unique=cell_type_unique)$pop.ct.sd
lambda_option<-0
InteRD2.output<-InteRD2(bulk.data=pseudo.seger$pseudo_eset,list_marker,cell_type_unique,comb_sampled=InteRD1,ave_est,ave_sd,lambda_option=lambda_option)
lambda_option<-1000
InteRD2.output<-InteRD2(bulk.data=pseudo.seger$pseudo_eset,list_marker,cell_type_unique,comb_sampled=InteRD1,ave_est,ave_sd,lambda_option=lambda_option)
lambda_option<-10000
InteRD2.output<-InteRD2(bulk.data=pseudo.seger$pseudo_eset,list_marker,cell_type_unique,comb_sampled=InteRD1,ave_est,ave_sd,lambda_option=lambda_option)
InteRD2<-InteRD.predict.prop(InteRD.output=InteRD2.output)
ave_est
library(InteRD)
readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
seger <- readRDSFromWeb("https://github.com/chencxxy28/Data/raw/main/data_InteRD/segerstolpe.rds")
pseudo.seger<-readRDSFromWeb("https://github.com/chencxxy28/Data/raw/main/data_InteRD/pseudo.seger.rds")
comb<-readRDSFromWeb("https://github.com/chencxxy28/Data/raw/main/data_InteRD/comb_seger.rds")
list_marker<-readRDSFromWeb("https://github.com/chencxxy28/Data/raw/main/data_InteRD/list_markerbaron20.rds") #get markers
lambda_option<-0
cell_type_unique<-c("alpha","beta","delta","gamma")
InteRD1.output<-InteRD1(bulk.data =pseudo.seger$pseudo_eset,list_marker,cell_type_unique,comb_used=comb,lambda_option)
InteRD1<-InteRD.predict.prop(InteRD.output=InteRD1.output)
ave_est = pop.ct.prop.scRNA(scRNA=seger[["sc.eset.qc"]],cell_type_unique=cell_type_unique)$pop.ct.prop
ave_sd = pop.ct.prop.scRNA(scRNA=seger[["sc.eset.qc"]],cell_type_unique=cell_type_unique)$pop.ct.sd
lambda_option<-10000
InteRD2.output<-InteRD2(bulk.data=pseudo.seger$pseudo_eset,list_marker,cell_type_unique,comb_sampled=InteRD1,ave_est,ave_sd,lambda_option=lambda_option)
InteRD2<-InteRD.predict.prop(InteRD.output=InteRD2.output)
library(InteRD)
readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
seger <- readRDSFromWeb("https://github.com/chencxxy28/Data/raw/main/data_InteRD/segerstolpe.rds")
pseudo.seger<-readRDSFromWeb("https://github.com/chencxxy28/Data/raw/main/data_InteRD/pseudo.seger.rds")
comb<-readRDSFromWeb("https://github.com/chencxxy28/Data/raw/main/data_InteRD/comb_seger.rds")
list_marker<-readRDSFromWeb("https://github.com/chencxxy28/Data/raw/main/data_InteRD/list_markerbaron20.rds") #get markers
lambda_option<-0
cell_type_unique<-c("alpha","beta","delta","gamma")
InteRD1.output<-InteRD1(bulk.data =pseudo.seger$pseudo_eset,list_marker,cell_type_unique,comb_used=comb,lambda_option)
InteRD1<-InteRD.predict.prop(InteRD.output=InteRD1.output)
ave_est = pop.ct.prop.scRNA(scRNA=seger[["sc.eset.qc"]],cell_type_unique=cell_type_unique)$pop.ct.prop
ave_sd = pop.ct.prop.scRNA(scRNA=seger[["sc.eset.qc"]],cell_type_unique=cell_type_unique)$pop.ct.sd
lambda_option<-10000
InteRD2.output<-InteRD2(bulk.data=pseudo.seger$pseudo_eset,list_marker,cell_type_unique,comb_sampled=InteRD1,ave_est,ave_sd,lambda_option=lambda_option)
InteRD2<-InteRD.predict.prop(InteRD.output=InteRD2.output)
library(InteRD)
readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
pseudo.seger<-readRDSFromWeb("https://github.com/chencxxy28/Data/raw/main/data_InteRD/pseudo.seger.rds")
SCDC_ENSEMBLE_MAD<-readRDSFromWeb("https://github.com/chencxxy28/Data/raw/main/data_InteRD/SCDC_ENSEMBLE_MAD_seger.rds")
evaluate(SCDC_ENSEMBLE_MAD,pseudo.seger$true_p)$all.eva
library(InteRD)
readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
pseudo.seger<-readRDSFromWeb("https://github.com/chencxxy28/Data/raw/main/data_InteRD/pseudo.seger.rds")
list_marker<-readRDSFromWeb("https://github.com/chencxxy28/Data/raw/main/data_InteRD/list_markerbaron20.rds") #get markers
cell_type_unique<-c("alpha","beta","delta","gamma")
ref_free.output<-Ref_free(bulk.data=pseudo.seger$pseudo_eset,list_marker=list_marker,cell_type_unique=cell_type_unique)
tol
#document:
devtools::document()
reffree<-InteRD.predict.prop(InteRD.output=ref_free.output,tol=0.01)
library(InteRD)
readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
pseudo.seger<-readRDSFromWeb("https://github.com/chencxxy28/Data/raw/main/data_InteRD/pseudo.seger.rds")
list_marker<-readRDSFromWeb("https://github.com/chencxxy28/Data/raw/main/data_InteRD/list_markerbaron20.rds") #get markers
cell_type_unique<-c("alpha","beta","delta","gamma")
ref_free.output<-Ref_free(bulk.data=pseudo.seger$pseudo_eset,list_marker=list_marker,cell_type_unique=cell_type_unique)
reffree<-InteRD.predict.prop(InteRD.output=ref_free.output,tol=0.01)
reffree<-InteRD.predict.prop(InteRD.output=ref_free.output,tol=0.1)
reffree<-InteRD.predict.prop(InteRD.output=ref_free.output,tol=0.1)
library(InteRD)
#document:
devtools::document()
library(InteRD)
readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
pseudo.seger<-readRDSFromWeb("https://github.com/chencxxy28/Data/raw/main/data_InteRD/pseudo.seger.rds")
list_marker<-readRDSFromWeb("https://github.com/chencxxy28/Data/raw/main/data_InteRD/list_markerbaron20.rds") #get markers
cell_type_unique<-c("alpha","beta","delta","gamma")
ref_free.output<-Ref_free(bulk.data=pseudo.seger$pseudo_eset,list_marker=list_marker,cell_type_unique=cell_type_unique)
reffree<-InteRD.predict.prop(InteRD.output=ref_free.output,tol=0.1)
reffree<-InteRD.predict.prop(InteRD.output=ref_free.output,tol=0.1)
library(InteRD)
readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
pseudo.seger<-readRDSFromWeb("https://github.com/chencxxy28/Data/raw/main/data_InteRD/pseudo.seger.rds")
list_marker<-readRDSFromWeb("https://github.com/chencxxy28/Data/raw/main/data_InteRD/list_markerbaron20.rds") #get markers
cell_type_unique<-c("alpha","beta","delta","gamma")
ref_free.output<-Ref_free(bulk.data=pseudo.seger$pseudo_eset,list_marker=list_marker,cell_type_unique=cell_type_unique,tol=0.01)
reffree<-InteRD.predict.prop(InteRD.output=ref_free.output)
#document:
devtools::document()
# The following function runs a local R CMD check
devtools::check()
library(InteRD)
readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
pseudo.seger<-readRDSFromWeb("https://github.com/chencxxy28/
Data/raw/main/data_InteRD/pseudo.seger.rds")
pseudo.seger<-readRDSFromWeb("https://github.com/chencxxy28/
Data/raw/main/data_InteRD/pseudo.seger.rds")
pseudo.seger<-readRDSFromWeb("https://github.com/chencxxy28/Data/raw/main/data_InteRD/pseudo.seger.rds")
pseudo.seger<-readRDSFromWeb("https://github.com/chencxxy28/Data/raw
/main/data_InteRD/pseudo.seger.rds")
pseudo.seger<-readRDSFromWeb("https://github.com/chencxxy28/Data/raw
/main/data_InteRD/pseudo.seger.rds")
pseudo.seger<-readRDSFromWeb("https://github.com/chencxxy28/Data/raw
/main/data_InteRD/pseudo.seger.rds")
pseudo.seger<-readRDSFromWeb("https://github.com/chencxxy28/Data/raw/
main/data_InteRD/pseudo.seger.rds")
urlremote<-"https://github.com/chencxxy28/Data/raw/main/data_InteRD/"
urlremote<-"https://github.com/chencxxy28/Data/raw/main/data_InteRD/"
pseudo.seger<-readRDSFromWeb(paste0(urlremote,"pseudo.seger.rds"))
comb<-readRDSFromWeb(paste0(urlremote,"comb_seger.rds"))
list_marker<-readRDSFromWeb(paste0(urlremote,"list_markerbaron20.rds") #get markers
library(InteRD)
readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
urlremote<-"https://github.com/chencxxy28/Data/raw/main/data_InteRD/"
pseudo.seger<-readRDSFromWeb(paste0(urlremote,"pseudo.seger.rds"))
comb<-readRDSFromWeb(paste0(urlremote,"comb_seger.rds"))
list_marker<-readRDSFromWeb(paste0(urlremote,"list_markerbaron20.rds") #get markers
lambda_option<-0
cell_type_unique<-c("alpha","beta","delta","gamma")
InteRD1.output<-InteRD1(bulk.data =pseudo.seger$pseudo_eset,list_marker,
cell_type_unique,comb_used=comb,lambda_option)
InteRD1<-InteRD.predict.prop(InteRD.output=InteRD1.output)
library(InteRD)
readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
urlremote<-"https://github.com/chencxxy28/Data/raw/main/data_InteRD/"
pseudo.seger<-readRDSFromWeb(paste0(urlremote,"pseudo.seger.rds"))
comb<-readRDSFromWeb(paste0(urlremote,"comb_seger.rds"))
list_marker<-readRDSFromWeb(paste0(urlremote,"list_markerbaron20.rds")) #get markers
lambda_option<-0
cell_type_unique<-c("alpha","beta","delta","gamma")
InteRD1.output<-InteRD1(bulk.data =pseudo.seger$pseudo_eset,list_marker,
cell_type_unique,comb_used=comb,lambda_option)
InteRD1<-InteRD.predict.prop(InteRD.output=InteRD1.output)
library(InteRD)
readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
urlremote<-"https://github.com/chencxxy28/Data/raw/main/data_InteRD/"
pseudo.seger<-readRDSFromWeb(paste0(urlremote,"pseudo.seger.rds"))
list_marker<-readRDSFromWeb(paste0(urlremote,"list_markerbaron20.rds"))
cell_type_unique<-c("alpha","beta","delta","gamma")
ref_free.output<-Ref_free(bulk.data=pseudo.seger$pseudo_eset,list_marker=list_marker,cell_type_unique=cell_type_unique,tol=0.01) #make tol=0.001
reffree<-InteRD.predict.prop(InteRD.output=ref_free.output)
library(InteRD)
readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
urlremote<-"https://github.com/chencxxy28/Data/raw/main/data_InteRD/"
seger<-readRDSFromWeb(paste0(urlremote,"segerstolpe.rds"))
cell_type_unique<-c("alpha","beta","delta","gamma")
ave_est<-pop.ct.prop.scRNA(scRNA=seger[["sc.eset.qc"]],cell_type_unique=cell_type_unique)$pop.ct.prop
ave_est
#document:
devtools::document()
# The following function runs a local R CMD check
devtools::check()
#document:
devtools::document()
# The following function runs a local R CMD check
devtools::check()
#document:
devtools::document()
# The following function runs a local R CMD check
devtools::check()
# Check for win-builder
devtools::check_win_devel()
results <- rhub::check_for_cran(platforms="macos-highsierra-release")
# Get the summary of your results
results$cran_summary()
# Generate your cran-comments.md, then you copy-paste the output from the function above
usethis::use_cran_comments()
# Generate your cran-comments.md, then you copy-paste the output from the function above
usethis::use_cran_comments()
# Generate your cran-comments.md, then you copy-paste the output from the function above
usethis::use_cran_comments()
#write the news.md
usethis::use_news_md()
# Spell check
devtools::spell_check()
# generate pdf manual
devtools::build_manual("/Users/chixiang.chen/Library/CloudStorage/OneDrive-UniversityofMarylandSchoolofMedicine/postdoc/postdoc/deconvolution/ref_based_rd/InteRD/")
#document:
devtools::document()
# generate pdf manual
devtools::build_manual("/Users/chixiang.chen/Library/CloudStorage/OneDrive-UniversityofMarylandSchoolofMedicine/postdoc/postdoc/deconvolution/ref_based_rd/InteRD/")
#document:
devtools::document()
# generate pdf manual
devtools::build_manual("/Users/chixiang.chen/Library/CloudStorage/OneDrive-UniversityofMarylandSchoolofMedicine/postdoc/postdoc/deconvolution/ref_based_rd/InteRD/")
#document:
devtools::document()
# generate pdf manual
devtools::build_manual("/Users/chixiang.chen/Library/CloudStorage/OneDrive-UniversityofMarylandSchoolofMedicine/postdoc/postdoc/deconvolution/ref_based_rd/InteRD/")
pkgdown::build_site()
# Check for win-builder
devtools::check_win_devel()
results <- rhub::check_for_cran(platforms="macos-highsierra-release")
# Get the summary of your results
results$cran_summary()
# Generate your cran-comments.md, then you copy-paste the output from the function above
usethis::use_cran_comments()
#write the news.md
usethis::use_news_md()
# Spell check
devtools::spell_check()
# generate pdf manual
devtools::build_manual("/Users/chixiang.chen/Library/CloudStorage/OneDrive-UniversityofMarylandSchoolofMedicine/postdoc/postdoc/deconvolution/ref_based_rd/InteRD/")
devtools::release()
library(InteRD)
readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
urlremote<-"https://github.com/chencxxy28/Data/raw/main/data_InteRD/"
pseudo.seger<-readRDSFromWeb(paste0(urlremote,"pseudo.seger.rds"))
comb<-readRDSFromWeb(paste0(urlremote,"comb_seger.rds"))
seger<-readRDSFromWeb(paste0(urlremote,"segerstolpe.rds"))
list_marker<-readRDSFromWeb(paste0(urlremote,"list_markerbaron20.rds"))
lambda_option<-0
cell_type_unique<-c("alpha","beta","delta","gamma")
InteRD1.output<-InteRD1(bulk.data =pseudo.seger$pseudo_eset,list_marker,
cell_type_unique,comb_used=comb,lambda_option)
InteRD1<-InteRD.predict.prop(InteRD.output=InteRD1.output)
saveRDS(InteRD1,"/Users/chixiang.chen/Library/CloudStorage/OneDrive-UniversityofMarylandSchoolofMedicine/postdoc/postdoc/deconvolution/ref_based_rd/data_InteRD/InteRD1.rds")
ave_est = pop.ct.prop.scRNA(scRNA=seger[["sc.eset.qc"]],
cell_type_unique=cell_type_unique)$pop.ct.prop
ave_sd = pop.ct.prop.scRNA(scRNA=seger[["sc.eset.qc"]],
cell_type_unique=cell_type_unique)$pop.ct.sd
saveRDS(ave_est,"/Users/chixiang.chen/Library/CloudStorage/OneDrive-UniversityofMarylandSchoolofMedicine/postdoc/postdoc/deconvolution/ref_based_rd/data_InteRD/ave_est.rds")
saveRDS(ave_sd,"/Users/chixiang.chen/Library/CloudStorage/OneDrive-UniversityofMarylandSchoolofMedicine/postdoc/postdoc/deconvolution/ref_based_rd/data_InteRD/ave_sd.rds")
library(InteRD)
readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
urlremote<-"https://github.com/chencxxy28/Data/raw/main/data_InteRD/"
pseudo.seger<-readRDSFromWeb(paste0(urlremote,"pseudo.seger.rds"))
InteRD1<-readRDSFromWeb(paste0(urlremote,"InteRD1.rds"))
ave_est<-readRDSFromWeb(paste0(urlremote,"ave_est.rds"))
ave_sd<-readRDSFromWeb(paste0(urlremote,"ave_sd.rds"))
list_marker<-readRDSFromWeb(paste0(urlremote,"list_markerbaron20.rds"))
lambda_option<-0
cell_type_unique<-c("alpha","beta","delta","gamma")
lambda_option<-10000
InteRD2.output<-InteRD2(bulk.data=pseudo.seger$pseudo_eset,list_marker,
cell_type_unique,comb_sampled=InteRD1,ave_est,ave_sd,lambda_option=lambda_option)
InteRD2<-InteRD.predict.prop(InteRD.output=InteRD2.output)
lambda_option<-e+05
lambda_option<-10e+05
lambda_option
lambda_option<-10e+05
lambda_option
library(InteRD)
readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
urlremote<-"https://github.com/chencxxy28/Data/raw/main/data_InteRD/"
pseudo.seger<-readRDSFromWeb(paste0(urlremote,"pseudo.seger.rds"))
InteRD1<-readRDSFromWeb(paste0(urlremote,"InteRD1.rds"))
ave_est<-readRDSFromWeb(paste0(urlremote,"ave_est.rds"))
ave_sd<-readRDSFromWeb(paste0(urlremote,"ave_sd.rds"))
list_marker<-readRDSFromWeb(paste0(urlremote,"list_markerbaron20.rds"))
lambda_option<-0
cell_type_unique<-c("alpha","beta","delta","gamma")
lambda_option<-10e+05
InteRD2.output<-InteRD2(bulk.data=pseudo.seger$pseudo_eset,list_marker,
cell_type_unique,comb_sampled=InteRD1,ave_est,ave_sd,lambda_option=lambda_option)
InteRD2<-InteRD.predict.prop(InteRD.output=InteRD2.output)
library(InteRD)
readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
urlremote<-"https://github.com/chencxxy28/Data/raw/main/data_InteRD/"
pseudo.seger<-readRDSFromWeb(paste0(urlremote,"pseudo.seger.rds"))
InteRD1<-readRDSFromWeb(paste0(urlremote,"InteRD1.rds"))
lambda_option<-0
cell_type_unique<-c("alpha","beta","delta","gamma")
cell_type_unique<-c("alpha","beta","delta","gamma")
InteRD1<-InteRD.predict.prop(InteRD.output=InteRD1.output)
InteRD1
library(InteRD)
readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
urlremote<-"https://github.com/chencxxy28/Data/raw/main/data_InteRD/"
pseudo.seger<-readRDSFromWeb(paste0(urlremote,"pseudo.seger.rds"))
InteRD1<-readRDSFromWeb(paste0(urlremote,"InteRD1.rds"))
lambda_option<-0
cell_type_unique<-c("alpha","beta","delta","gamma")
InteRD1<-InteRD.predict.prop(InteRD.output=InteRD1.output)
#document:
devtools::document()
# Check for win-builder
devtools::check_win_devel()
results <- rhub::check_for_cran(platforms="macos-highsierra-release")
# Get the summary of your results
results$cran_summary()
# Generate your cran-comments.md, then you copy-paste the output from the function above
usethis::use_cran_comments()
# Continuous integration with Travis CI
usethis::use_github_actions()
#write the news.md
usethis::use_news_md()
# Spell check
devtools::spell_check()
pkgdown::build_site()
#submit to cran
devtools::release()
InteRD1.output
saveRDS(InteRD1.output,"/Users/chixiang.chen/Library/CloudStorage/OneDrive-UniversityofMarylandSchoolofMedicine/postdoc/postdoc/deconvolution/ref_based_rd/data_InteRD/InteRD1.output.rds")
InteRD1<-readRDSFromWeb(paste0(urlremote,"InteRD1.output.rds"))
InteRD1.output<-readRDSFromWeb(paste0(urlremote,"InteRD1.output.rds"))
lambda_option<-0
cell_type_unique<-c("alpha","beta","delta","gamma")
InteRD1<-InteRD.predict.prop(InteRD.output=InteRD1.output)
InteRD1
#document:
devtools::document()
#document:
devtools::document()
# Check for win-builder
devtools::check_win_devel()
results <- rhub::check_for_cran(platforms="macos-highsierra-release")
# Get the summary of your results
results$cran_summary()
# Generate your cran-comments.md, then you copy-paste the output from the function above
usethis::use_cran_comments()
# Generate your cran-comments.md, then you copy-paste the output from the function above
usethis::use_cran_comments()
# Generate your cran-comments.md, then you copy-paste the output from the function above
usethis::use_cran_comments()
#write the news.md
usethis::use_news_md()
# The following function runs a local R CMD check
devtools::check()
pkgdown::build_site()
pkgdown::build_site()
#document:
devtools::document()
library(InteRD)
readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
urlremote<-"https://github.com/chencxxy28/Data/raw/main/data_InteRD/"
pseudo.seger<-readRDSFromWeb(paste0(urlremote,"pseudo.seger.rds"))
comb<-readRDSFromWeb(paste0(urlremote,"comb_seger.rds"))
list_marker<-readRDSFromWeb(paste0(urlremote,"list_markerbaron20.rds"))
lambda_option<-0
cell_type_unique<-c("alpha","beta","delta","gamma")
InteRD1.output<-InteRD1(bulk.data =pseudo.seger$pseudo_eset,list_marker,
cell_type_unique,comb_used=comb,lambda_option,tol=1e-02)
#document:
devtools::document()
InteRD1.output<-InteRD1(bulk.data =pseudo.seger$pseudo_eset,list_marker,
cell_type_unique,comb_used=comb,lambda_option,tol=1e-02)
library(InteRD)
readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
urlremote<-"https://github.com/chencxxy28/Data/raw/main/data_InteRD/"
pseudo.seger<-readRDSFromWeb(paste0(urlremote,"pseudo.seger.rds"))
comb<-readRDSFromWeb(paste0(urlremote,"comb_seger.rds"))
list_marker<-readRDSFromWeb(paste0(urlremote,"list_markerbaron20.rds"))
lambda_option<-0
cell_type_unique<-c("alpha","beta","delta","gamma")
InteRD1.output<-InteRD1(bulk.data =pseudo.seger$pseudo_eset,list_marker,
cell_type_unique,comb_used=comb,lambda_option,tol=1e-02)
InteRD1<-InteRD.predict.prop(InteRD.output=InteRD1.output)
library(InteRD)
readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
#document:
devtools::document()
library(InteRD)
readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
urlremote<-"https://github.com/chencxxy28/Data/raw/main/data_InteRD/"
pseudo.seger<-readRDSFromWeb(paste0(urlremote,"pseudo.seger.rds"))
InteRD1<-readRDSFromWeb(paste0(urlremote,"InteRD1.rds"))
ave_est<-readRDSFromWeb(paste0(urlremote,"ave_est.rds"))
ave_sd<-readRDSFromWeb(paste0(urlremote,"ave_sd.rds"))
list_marker<-readRDSFromWeb(paste0(urlremote,"list_markerbaron20.rds"))
lambda_option<-0
cell_type_unique<-c("alpha","beta","delta","gamma")
lambda_option<-10e+05
InteRD2.output<-InteRD2(bulk.data=pseudo.seger$pseudo_eset,list_marker,cell_type_unique,
comb_sampled=InteRD1,ave_est,ave_sd,lambda_option=lambda_option,tol=0.01)
InteRD2<-InteRD.predict.prop(InteRD.output=InteRD2.output)
#document:
devtools::document()
pseudo.seger<-readRDSFromWeb(paste0(urlremote,"pseudo.seger.rds"))
pseudo.seger
View(pseudo.seger)
readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
urlremote<-"https://github.com/chencxxy28/Data/raw/main/data_InteRD/"
pseudo.seger<-readRDSFromWeb(paste0(urlremote,"pseudo.seger.rds"))
list_marker<-readRDSFromWeb(paste0(urlremote,"list_markerbaron20.rds"))
haha<-unlist(list_marker)
haha
dim(pseudo.seger[["pseudo_bulk"]])
which(rownames(pseudo.seger[["pseudo_bulk"]]) %in% haha)
data<-which(rownames(pseudo.seger[["pseudo_bulk"]]) %in% haha)
dada<-which(rownames(pseudo.seger[["pseudo_bulk"]]) %in% haha)
new.index<-sample(1:20280,1000)
head(new.index)
pseudo.seger[["pseudo_bulk"]]<-pseudo.seger[["pseudo_bulk"]][unique(c(new.index,dada)),]
View(pseudo.seger)
library(InteRD)
readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
urlremote<-"https://github.com/chencxxy28/Data/raw/main/data_InteRD/"
list_marker<-readRDSFromWeb(paste0(urlremote,"list_markerbaron20.rds"))
cell_type_unique<-c("alpha","beta","delta","gamma")
ref_free.output<-Ref_free(bulk.data=pseudo.seger$pseudo_eset,list_marker=list_marker,
cell_type_unique=cell_type_unique,tol=0.01) #make tol=0.001
reffree<-InteRD.predict.prop(InteRD.output=ref_free.output)
View(pseudo.seger)
InteRD1<-readRDSFromWeb(paste0(urlremote,"InteRD1.rds"))
ave_est<-readRDSFromWeb(paste0(urlremote,"ave_est.rds"))
ave_sd<-readRDSFromWeb(paste0(urlremote,"ave_sd.rds"))
list_marker<-readRDSFromWeb(paste0(urlremote,"list_markerbaron20.rds"))
lambda_option<-0
cell_type_unique<-c("alpha","beta","delta","gamma")
lambda_option<-10e+05
InteRD2.output<-InteRD2(bulk.data=pseudo.seger$pseudo_eset,list_marker,cell_type_unique,
comb_sampled=InteRD1,ave_est,ave_sd,lambda_option=lambda_option,tol=0.01)
InteRD2<-InteRD.predict.prop(InteRD.output=InteRD2.output)
comb<-readRDSFromWeb(paste0(urlremote,"comb_seger.rds"))
list_marker<-readRDSFromWeb(paste0(urlremote,"list_markerbaron20.rds"))
lambda_option<-0
cell_type_unique<-c("alpha","beta","delta","gamma")
InteRD1.output<-InteRD1(bulk.data =pseudo.seger$pseudo_eset,list_marker,
cell_type_unique,comb_used=comb,lambda_option,tol=1e-02)
InteRD1<-InteRD.predict.prop(InteRD.output=InteRD1.output)
saveRDS(pseudo.seger,"/Users/chixiang.chen/Library/CloudStorage/OneDrive-UniversityofMarylandSchoolofMedicine/postdoc/postdoc/deconvolution/ref_based_rd/data_InteRD/pseudo.seger.rds")
View(pseudo.seger)
data
dada
new.ind<-sample(1:20280,100)
pseudo.seger<-readRDSFromWeb(paste0(urlremote,"pseudo.seger.rds"))
pseudo.seger[["pseudo_bulk"]]<-pseudo.seger[["pseudo_bulk"]][unique(c(dada,new.ind)),]
View(pseudo.seger)
View(pseudo.seger)
pseudo.seger[["pseudo_eset"]]
#'readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
#'readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
#'urlremote<-"https://github.com/chencxxy28/Data/raw/main/data_InteRD/"
View(pseudo.seger)
#'readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
#'readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
#'urlremote<-"https://github.com/chencxxy28/Data/raw/main/data_InteRD/"
readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
urlremote<-"https://github.com/chencxxy28/Data/raw/main/data_InteRD/"
pseudo.seger<-readRDSFromWeb(paste0(urlremote,"pseudo.seger.rds"))
View(pseudo.seger)
View(pseudo.seger)
list_marker<-readRDSFromWeb(paste0(urlremote,"list_markerbaron20.rds"))
#find markers
which(rownames(pseudo.seger[["pseudo_bulk"]] %in% unlist(list_marker))
pseudo.seger[["pseudo_bulk"]])
#find markers
which(rownames(pseudo.seger[["pseudo_bulk"]]) %in% unlist(list_marker))
#find markers
marker.index<-which(rownames(pseudo.seger[["pseudo_bulk"]]) %in% unlist(list_marker))
random.index<-sample(1:nrow(pseudo.seger),500)
random.index<-sample(1:nrow(pseudo.seger[["pseudo_bulk"]]),500)
head(random.index)
final.index<-unique(c(marker.index,random.index))
#create a new pseudo.bulk
bulk.eset<-pseudo.seger[["pseudo_bulk"]][final.index,]
bulk_data<-(exprs(bulk.eset))
dim(bulk_data)
pdata<-data.frame(sample=colnames(bulk_data))
fdata<-data.frame(genes=rownames(bulk_data))
rownames(pdata)<-colnames(bulk_data)
rownames(fdata)<-rownames(bulk_data)
pseudo.seger_test<-ExpressionSet(exprs_data,
AnnotatedDataFrame(pdata),
AnnotatedDataFrame(fdata))
exprs_data<-as.matrix(bulk_data)
x
pseudo.seger_test<-ExpressionSet(exprs_data,
AnnotatedDataFrame(pdata),
AnnotatedDataFrame(fdata))
View(pseudo.seger_test)
pseudo.seger<-pseudo.seger_test
library(InteRD)
comb<-readRDSFromWeb(paste0(urlremote,"comb_seger.rds"))
list_marker<-readRDSFromWeb(paste0(urlremote,"list_markerbaron20.rds"))
lambda_option<-0
cell_type_unique<-c("alpha","beta","delta","gamma")
InteRD1.output<-InteRD1(bulk.data =pseudo.seger,list_marker,
cell_type_unique,comb_used=comb,lambda_option,tol=1e-02)
InteRD1<-InteRD.predict.prop(InteRD.output=InteRD1.output)
InteRD1<-readRDSFromWeb(paste0(urlremote,"InteRD1.rds"))
ave_est<-readRDSFromWeb(paste0(urlremote,"ave_est.rds"))
ave_sd<-readRDSFromWeb(paste0(urlremote,"ave_sd.rds"))
list_marker<-readRDSFromWeb(paste0(urlremote,"list_markerbaron20.rds"))
lambda_option<-0
cell_type_unique<-c("alpha","beta","delta","gamma")
lambda_option<-10e+05
InteRD2.output<-InteRD2(bulk.data=pseudo.seger,list_marker,cell_type_unique,
comb_sampled=InteRD1,ave_est,ave_sd,lambda_option=lambda_option,tol=0.01)
InteRD2<-InteRD.predict.prop(InteRD.output=InteRD2.output)
ref_free.output<-Ref_free(bulk.data=pseudo.seger,list_marker=list_marker,
cell_type_unique=cell_type_unique,tol=0.01) #make tol=0.001
reffree<-InteRD.predict.prop(InteRD.output=ref_free.output)
readRDSFromWeb<-function(ref) {readRDS(gzcon(url(ref)))}
urlremote<-"https://github.com/chencxxy28/Data/raw/main/data_InteRD/"
pseudo.seger<-readRDSFromWeb(paste0(urlremote,"pseudo.seger.rds"))
list_marker<-readRDSFromWeb(paste0(urlremote,"list_markerbaron20.rds"))
true_p<-pseudo.seger$true_p
View(pseudo.seger)
saveRDS(true_p,"/Users/chixiang.chen/Library/CloudStorage/OneDrive-UniversityofMarylandSchoolofMedicine/postdoc/postdoc/deconvolution/ref_based_rd/data_InteRD/true_p.rds")
#find markers
marker.index<-which(rownames(pseudo.seger[["pseudo_bulk"]]) %in% unlist(list_marker))
random.index<-sample(1:nrow(pseudo.seger[["pseudo_bulk"]]),500)
final.index<-unique(c(marker.index,random.index))
#create a new pseudo.bulk
bulk.eset<-pseudo.seger[["pseudo_bulk"]][final.index,]
bulk_data<-(exprs(bulk.eset))
exprs_data<-as.matrix(bulk_data)
pdata<-data.frame(sample=colnames(bulk_data))
fdata<-data.frame(genes=rownames(bulk_data))
rownames(pdata)<-colnames(bulk_data)
rownames(fdata)<-rownames(bulk_data)
pseudo.seger_test<-ExpressionSet(exprs_data,
AnnotatedDataFrame(pdata),
AnnotatedDataFrame(fdata))
pseudo.seger<-pseudo.seger_test
saveRDS(pseudo.seger,"/Users/chixiang.chen/Library/CloudStorage/OneDrive-UniversityofMarylandSchoolofMedicine/postdoc/postdoc/deconvolution/ref_based_rd/data_InteRD/pseudo.seger.rds")
marker.index
